// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WEBAPI.Models;

namespace WEBAPI.Migrations
{
    [DbContext(typeof(SLOTHContext))]
    [Migration("20210503133118_V2")]
    partial class V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WEBAPI.Models.Calendar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("WEBAPI.Models.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerSide")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AnswerSide");

                    b.Property<int?>("CardSetID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionSide")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QuestionSide");

                    b.HasKey("ID");

                    b.HasIndex("CardSetID");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("WEBAPI.Models.CardSet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("Category");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Color");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("Visibility");

                    b.HasKey("ID");

                    b.ToTable("CardSet");
                });

            modelBuilder.Entity("WEBAPI.Models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("EndTime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("StartTime");

                    b.HasKey("ID");

                    b.HasIndex("CalendarID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("WEBAPI.Models.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.HasKey("ID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("WEBAPI.Models.MotivationMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("MotivationMessage");
                });

            modelBuilder.Entity("WEBAPI.Models.Note", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NotebookID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.HasKey("ID");

                    b.HasIndex("NotebookID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("WEBAPI.Models.Notebook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("Category");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("Visibility");

                    b.HasKey("ID");

                    b.ToTable("Notebook");
                });

            modelBuilder.Entity("WEBAPI.Models.StudyPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreakTime")
                        .HasColumnType("int")
                        .HasColumnName("BreakTime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int")
                        .HasColumnName("WorkTime");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("StudyPlan");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Avatar");

                    b.Property<int?>("CalendarID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Salt");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tag");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("ID");

                    b.HasIndex("CalendarID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WEBAPI.Models.UserCardSet", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("CardSetID")
                        .HasColumnType("int")
                        .HasColumnName("CardSetID");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.HasKey("UserID", "CardSetID");

                    b.HasIndex("CardSetID");

                    b.ToTable("UserCardSet");
                });

            modelBuilder.Entity("WEBAPI.Models.UserGroup", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupID")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.HasKey("UserID", "GroupID");

                    b.HasIndex("GroupID");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("WEBAPI.Models.UserNotebook", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("NotebookID")
                        .HasColumnType("int")
                        .HasColumnName("NotebookID");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.HasKey("UserID", "NotebookID");

                    b.HasIndex("NotebookID");

                    b.ToTable("UserNotebook");
                });

            modelBuilder.Entity("WEBAPI.Models.Card", b =>
                {
                    b.HasOne("WEBAPI.Models.CardSet", "CardSet")
                        .WithMany("Cards")
                        .HasForeignKey("CardSetID");

                    b.Navigation("CardSet");
                });

            modelBuilder.Entity("WEBAPI.Models.Event", b =>
                {
                    b.HasOne("WEBAPI.Models.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarID");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("WEBAPI.Models.Note", b =>
                {
                    b.HasOne("WEBAPI.Models.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookID");

                    b.Navigation("Notebook");
                });

            modelBuilder.Entity("WEBAPI.Models.StudyPlan", b =>
                {
                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("StudyPlans")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.HasOne("WEBAPI.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarID");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("WEBAPI.Models.UserCardSet", b =>
                {
                    b.HasOne("WEBAPI.Models.CardSet", "CardSet")
                        .WithMany()
                        .HasForeignKey("CardSetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("CardSets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.UserGroup", b =>
                {
                    b.HasOne("WEBAPI.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.UserNotebook", b =>
                {
                    b.HasOne("WEBAPI.Models.Notebook", "Notebook")
                        .WithMany()
                        .HasForeignKey("NotebookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Notebooks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WEBAPI.Models.CardSet", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("WEBAPI.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WEBAPI.Models.Notebook", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.Navigation("CardSets");

                    b.Navigation("Groups");

                    b.Navigation("Notebooks");

                    b.Navigation("StudyPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
